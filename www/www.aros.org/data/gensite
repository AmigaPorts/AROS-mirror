#!/usr/bin/env python

'''Generate the AROS WWW site.'''

from util import *

import news
news.gen (datadir)

import status
status.gen ()

def genDocumentation ():

    page = Page (linkBoxItem='Documentation')
    # Put the old docs here
    page.meat = page.meat + [Text ('Please choose a link to the left')]
    page.write ('documentation.html')

def genScreenshots ():
    '''Create a page with screenshots.'''

    page = Page (linkBoxItem='Screenshots')

    # First, the pictures of AROS developers, etc.
    tn1 = Thumbnail ('pics/developers/Digulla-2.jpg')
    tn2 = Thumbnail ('pics/developers/Digulla-1.jpg')
    tn3 = Thumbnail ('pics/developers/nlorentz.jpg')
    page.meat = page.meat + [
	Name ('Pictures around AROS'),
	Heading (2, 'Pictures around AROS'),
	Paragraph ('If you ever wanted to know what Aaron "Optimizer" Digulla'
	    ' looks like, here are two pictures:'),
	ThumbnailTable (tn1, tn2),
	Paragraph ('Picture of Nils Henrik Lorentzen:'),
	ThumbnailTable (tn3),
	Paragraph ('Hopefully, more pictures of AROS developers will'
	    ' show up here :-)'),
	Name ('Screenshots'),
	Heading (2, 'Screenshots'),
    ]

    page.linksToFix.append (tn1.href)
    page.imagesToFix.append (tn1.img)
    page.linksToFix.append (tn2.href)
    page.imagesToFix.append (tn2.img)
    page.linksToFix.append (tn3.href)
    page.imagesToFix.append (tn3.img)

    def processDir (dir, page=page):
	'''Read a directory and put all pictures in it into ThumbnailTables.
	The name of the directory must be YYYYMMDD.'''
	str = os.path.basename (dir)
	date = '%d.%d.%d' % (
	    int (str[6:8]),
	    int (str[4:6]),
	    int (str[0:4]),
	)
	fh = open (os.path.join (dir, 'README'), 'r')
	text = fh.read ()
	fh.close ()
	
	list = [
	    Paragraph (RawText ('%s - %s' % (date, text))),
	]
	files = glob.glob (os.path.join (dir, "*.*"))
	files.sort ()
	pics = []
	for file in files:
	    if file[-4:] == '.txt' or string.find (file, '_mini.') != -1:
		continue

	    tn = Thumbnail (
		os.path.join (
		    screenshoturl,
		    str,
		    os.path.basename (file)
		)
	    )
	    pics.append (tn)
	    page.linksToFix.append (tn.href)
	    page.imagesToFix.append (tn.img)
	
	list.append (apply (ThumbnailTable, pics))
	return list
	    
    # Read all screenshots and sort them by date.
    dirs = glob.glob (os.path.join (screenshoturl, '[0-9]*'))
    dirs.sort ()
    dirs.reverse ()
    for dir in dirs:
	page.meat = page.meat + processDir (dir)

    page.write ('screenshots.html')

def genDownload ():
    page = Page (linkBoxItem='Download')
    # Create the page for downloads
    page.meat = page.meat + [Text ('Please choose a link to the left.')]
    page.write ('download.html')

def genSnapshots ():
    '''Create the page with the snapshots with sizes and links for
    download.'''
    page = Page (linkBoxItem='Snapshots')

    files = glob.glob (os.path.join (ftpdir, 'snapshots/*.tgz'))
    if not files:
        page.meat = page.meat + [Text ('No snapshots found')]
    else:
	dict = {}
	columns = {}
	days = {}

	for file in files:
	    ss = Snapshot (file)
	    day = dict.get (ss.date, None)
	    if not day:
		day = {}
		dict[ss.date] = day
	    if ss.ext != 'tgz':
		print 'Unknown Snapshot', file
		continue

	    day[ss.title] = ss
	    columns[ss.title] = None
	    days[ss.date] = None
	
	table = TableLite (cellpadding=15, border=2)
	page.meat = page.meat + [table]
	
	colList = columns.keys ()
	colList.sort ()
	row = TR ()
	table.append (row)
	td = TH ('Date')
	row = row + [td]
	    
	for col in colList:
	    td = TH (col)
	    row = row + [td]
	
	dateList = days.keys ()
	dateList.sort ()
	dateList.reverse ()
	for date in dateList:
	    row = TR ()
	    table.append (row)

	    str = '%d.%d.%d' % (
		int (date[6:8]),
		int (date[4:6]),
		int (date[0:4]),
	    )
	    row = row + [TD (str)]

	    day = dict.get (date, {})

	    for col in colList:
		t = Text ()
		ss = day.get (col, None)
		if ss:
		    t.append (Href ('ftp://ftp.aros.org/pub/aros/snapshots/%s' % ss.filename,
			ss.size
		    ))
		
		    if ss.log:
			t.append ('(Log: ')
			t.append (Href (
			    'ftp://ftp.aros.org/pub/aros/snapshots/%s' % \
				ss.log.filename,
			    ss.log.size
			))
			t.append (')')
		    else:
			if not ss.title in ('contrib', 'source'):
			    t.append ('(No log)')
		else:
		    t.append ('-')

		row = row + [TD (t)]

    page.write ('snapshots.html')

def processLinks (links):
    list = List ()

    for link in links:
	if type (link) == type (()):
	    link, children = link[0], link[1:]
	else:
	    children = None

	text = Text (link.href)
	if link.text:
	    if type (link.text) == type (()):
		t = Text ()
		for item in link.text:
		    t.append (item)
	    else:
		t = Text (link.text)
	    text.append (t)
	if link.logo:
	    text.append (Image ((link.logo, 0,0)))

	list.append (text)
	
	if children:
	    sublist = processLinks (children)
	    list.append (sublist)
    
    return list

def genLinks ():
    '''Create a page with links from links.py.'''
    def processSection (links, title):
	body = []

	#print title, list

	body.append (Name (title))
	body.append (Heading (2, title))
	list = processLinks (links)
	body.append (list)

	return body

    page = Page (linkBoxItem='Links')

    from links import moreRelated, articles, homepages, lessRelated

    page.meat = page.meat \
	+ processSection (moreRelated, 'More Related') \
	+ processSection (articles, 'Articles') \
	+ processSection (homepages, 'Homepages') \
	+ processSection (lessRelated, 'Less Related')

    page.write ('links.html')

import xmlsupport

def writeVerbatim (p, xmlfile, item):
    if isinstance (item, xmlsupport.Tag):
	# Give a hint if a tag might be unsupported
	if not item.name in ('p', 'ul', 'li', 'strong', 'i', 'a',):
	    print item.name
	p.fh.write ('<%s' % item.name)
	for attr, value in item.attr.items ():
	    p.fh.write (' %s="%s"' % (attr, value))
	p.fh.write ('>')
	xmlfile.processRecursive (p, item.content)
	p.fh.write ('</%s>' % item.name)
    else:
	p.fh.write (item.text)

def chapterToHtml (p, xmlfile, item):
    p.fh.write (str (Heading (1, item.attr['title'])))
    xmlfile.processRecursive (p, item.content)

def sectionToHtml (p, xmlfile, item):
    p.fh.write (str (Heading (2, item.attr['title'])))
    xmlfile.processRecursive (p, item.content)

def emailToHtml (p, xmlfile, item):
    email = item.content[0].text
    p.fh.write ('<A HREF="mailto:%s">%s</A>' % (email, email))
    subject = item.attr.get ('subject', None)
    if subject:
	p.fh.write (' with the subject "%s"' % subject)
    body = item.attr.get ('body', None)
    if body:
	if subject:
	    p.fh.write (' and')
	p.fh.write ('"%s" in the body' % body)

def exampleToHtml (p, xmlfile, item):
    outerTable = TableLite (
	border="0",
	width="804",
	#align="left",
	bgcolor=exampleBorderColor,
	cellpadding=2,
	cellspacing=0,
    )
    row = TR ()
    outerTable.append (row)
    td = TD ()
    row = row + [td]
    table = TableLite (
	border="0",
	width="800",
	#align="left",
	bgcolor=exampleBGColor,
	cellpadding=2,
	cellspacing=0,
    )
    td = td + [table]
    oldFH = p.fh
    for line in item.content:
	if not isinstance (line, xmlsupport.Tag) or line.name != 'line':
	    continue
	
	row = TR ()
	table.append (row)
	td = TD ()
	row = row + [td]

	if line.content:
	    p.fh = cStringIO.StringIO ()
	    xmlfile.processRecursive (p, line.content)
	    td = td + [RawText (p.fh.getvalue ())]
	    p.fh.close ()
	else:
	    td = td + [RawText ('&nbsp;')]
    p.fh = oldFH
    p.fh.write (str (outerTable))

def userToHtml (p, xmlfile, item):
    p.fh.write ('<strong><i>')
    xmlfile.processRecursive (p, item.content)
    p.fh.write ('</i></strong>')
    
def shellToHtml (p, xmlfile, item):
    p.fh.write ('<tt>')
    xmlfile.processRecursive (p, item.content)
    p.fh.write ('</tt>')
    
def filenameToHtml (p, xmlfile, item):
    p.fh.write ('<tt>')
    xmlfile.processRecursive (p, item.content)
    p.fh.write ('</tt>')

def descriptionToHtml (p, xmlfile, item):
    p.fh.write ('<p><dl>\n')
    for line in item.content:
	if not isinstance (line, xmlsupport.Tag) or line.name != 'li':
	    continue
	
	itemTitle = line.content[0]
	if not isinstance (itemTitle, xmlsupport.Tag) or itemTitle.name != 'item':
	    line.dump (0)
	    raise 'Expected "item"'
	
	p.fh.write ('<dt>')
	xmlfile.processRecursive (p, itemTitle.content)
	p.fh.write ('</dt>\n<dd>')
	xmlfile.processRecursive (p, line.content[1:])
	p.fh.write ('<dd>\n')

    p.fh.write ('</dl></p>\n')

extraInfo = {
}

def insertHtml (p, xmlfile, item):
    text = item.content[0].text

    if text == 'devlist':
	developers = Developers (cvsrootdir)
	p.fh.write ('<ul>\n')
	for dev in developers.developers:
	    p.fh.write ('<li>%s</li>\n' % (dev.name))
	p.fh.write ('</ul>')
    else:
	print 'Inserting',item.content[0].text
	p.fh.write (p.extraInfo[item.content[0].text])


class XmlPage (Page):
    def __init__ (self, xmlfilename, rcFile=arosRC, linkBoxItem='', **kw):
	apply (Page.__init__, (self, rcFile, linkBoxItem,), kw)

	xmlfile = xmlsupport.XmlFile (xmlfilename)

	XML2HTML = xmlsupport.Processor ()
        XML2HTML.fh = cStringIO.StringIO ()
	XML2HTML.setDefault (writeVerbatim)
	XML2HTML.add ('chapter', chapterToHtml)
	XML2HTML.add ('section', sectionToHtml)
	XML2HTML.add ('email', emailToHtml)
	XML2HTML.add ('insert', insertHtml)
	XML2HTML.add ('example', exampleToHtml)
	XML2HTML.add ('user', userToHtml)
	XML2HTML.add ('shell', shellToHtml)
	XML2HTML.add ('filename', filenameToHtml)
	XML2HTML.add ('description', descriptionToHtml)
	XML2HTML.extraInfo = extraInfo

	xmlfile.process (XML2HTML)
	self.meat = self.meat + [RawText (XML2HTML.fh.getvalue ())]
	XML2HTML.fh.close ()

# Call all generators in turn
genDocumentation ()
page = XmlPage (os.path.join (datadir, 'background.xml'),
    linkBoxItem='Background',
)
page.write ('background.html')
page = XmlPage (os.path.join (datadir, 'cvs.xml'),
    linkBoxItem='CVS',
)
page.write ('cvs.html')
page = XmlPage (os.path.join (datadir, 'mmake.xml'),
    linkBoxItem='MetaMake',
)
page.write ('mmake.html')

import htmlautodocs
htmlautodocs.gen ()

genScreenshots ()
genDownload ()
genSnapshots ()
genLinks ()
