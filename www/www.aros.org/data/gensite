#!/usr/bin/env python

'''Generate the AROS WWW site.'''

import glob, os, os.path
from HTMLcolors import *
from HTMLgen import *
import PIL.Image

htmldir = os.environ['HTMLDIR']
ftpdir = os.environ['FTPDIR']
screenshoturl = 'pics/screenshots'

mainLinks = (
    ( Href ('/index.html', 'NEWS'),
	Href ('/status.html', 'Status'),
	Href ('/oldnews.html', 'Old News'),
    ),
    ( Href ('/documentation.html', 'Documentation'),
	Href ('/autodocs/index.html', 'AutoDocs'),
    ),
    ( Href ('/screenshots.html', 'Screenshots'),
    ),
    ( Href ('/download.html', 'Download'),
	Href ('ftp://ftp.aros.org/pub/aros/', 'FTP Server'),
	Href ('/snapshots.html', 'Snapshots'),
    ),
    ( Href ('/links.html', 'Links'),
	Href ('/links.html#More Related', 'More Related'),
	Href ('/links.html#Articles', 'Articles'),
	Href ('/links.html#Homepages', 'Homepages'),
	Href ('/links.html#Less Related', 'Less Related'),
    ),
)

class Page (SeriesDocument):
    def __init__ (self, rcFile='aros.rc', linkBoxItem='', **kw):
	apply (SeriesDocument.__init__, (self, rcFile,), kw)

	table = TableLite ()
	self.banner = table
	row = TR ()
	table.append (row)
	td = TD (valign='TOP')
	logo = Href ('/', Image (('pics/logo.gif', 300, 123), alt='AROS'))
	td = td + [logo]
	row = row + [td, TD (Text ('Amiga Research OS'))]

	# HTMLgen expects a tuple in self.logo
	#self.logo = Href ('/', Image (('pics/minilogo.gif', 71, 28), alt='AROS'))

	table = TableLite ()
	self.append (table)
	row = TR ()
	table.append (row)
	td = TD (valign='TOP')
	row = row + [td,]
	table2 = TableLite ()
	td = td + [table2,]
	row2 = TR ()
	table2.append (row2)
	td2 = TD (bgcolor='#40FF80', valign='TOP')
	row2 = row2 + [td2]
	self.linkbox = Font (size='-2')
	td2 = td2 + [self.linkbox]

	self.meat = TD (valign='TOP')
	row = row + [self.meat]

	self.gohome = '/'

	if linkBoxItem:
	    list = []
	    for links in mainLinks:
		if links[0].text == linkBoxItem:
		    list.append (links)
		else:
		    list.append ((links[0],))

	    
	    for links in list:
		self.linkbox = self.linkbox + [links[0], BR ()]
		for link in links[1:]:
		    self.linkbox = self.linkbox + [
			RawText ('&nbsp;&nbsp;&nbsp;'),
			link, BR ()]

    def write (self, filename):
	SeriesDocument.write (self, os.path.join (htmldir, filename))

def genNews ():
    list = glob.glob ('news/*')
    list.remove ('news/CVS')
    list.sort ()
    list.reverse ()
    
    def genPage (items, filename):
	def prepareNewsItem (filename):
	    row = TR ()
	    td = TD (bgcolor='#80C0F0', valign='TOP')
	    row = row + [td]
	    str = os.path.basename (filename)
	    date = '%d.%d.%d' % (
		int (str[6:8]),
		int (str[4:6]),
		int (str[0:4]),
	    )
	    td = td + [Name (str), date]

	    td = TD (valign='TOP')
	    row = row + [td]

	    fh = open (filename, 'r')
	    body = fh.read ()
	    fh.close ()

	    body = string.replace (body, '\n\n', '<P>\n\n')
	    td = td + [RawText (body)]
	    
	    return row
	    
	page = Page (linkBoxItem='NEWS')
	table = TableLite ()
	page.meat = page.meat + [table,]

	for file in items:
	    item = prepareNewsItem (file)
	    table.append (item)

	if filename == 'index.html':
	    p = Paragraph ()
	    p.append (Href ('oldnews.html', 'Older News'))
	    page.meat = page.meat + [p]
	else:
	    page.gotop = '/'

	page.write (filename)

    genPage (list[:5], 'index.html')
    genPage (list[5:], 'oldnews.html')

def genStatus ():
    page = Page (linkBoxItem='NEWS')
    body = []
    body.append (Heading (2, 'Size of AROS sources'))
    body.append (Paragraph (Image ('aros_size.png')))
    body.append (Paragraph (Href ('aros_size.jpg', 'Also as JPEG')))
    body.append (Heading (2, 'Size of contributed sources'))
    body.append (Paragraph (Image ('contrib_size.png')))
    body.append (Paragraph (Href ('contrib_size.jpg', 'Also as JPEG')))
    page.meat = page.meat + body
    page.write ('status.html')

def genDocumentation ():
    page = Page (linkBoxItem='Documentation')
    page.meat = page.meat + [Text ('FIXME')]
    page.write ('documentation.html')

class ThumbnailTable (TableLite):
    def __init__ (self, *pics):
	if len (pics) == 1:
	    width = "40%"
	else:
	    width = "75%"

	TableLite.__init__ (self,
	    border="0",
	    width=width,
	    align="center",
	    bgcolor="#000066",
	    cellpadding=0,
	)
	row = TR ()
	self.append (row)
	td = TD ()
	row = row + [td]
	table2 = TableLite (
	    border="0",
	    bgcolor="#CCCCCC",
	    cellspacing="2",
	    cellpadding="5",
	)
	td = td + [table2]

	if (len (pics) & 1) == 1:
	    pics = list (pics) + [None]
	i, n = 0, len (pics)
	while i < n:
	    row = TR ()
	    left, right = pics[i], pics[i+1]
	    i = i + 2
	    left = left.toHtml ()
	    if not right:
		if n == 2:
		    right = []
		else:
		    right = [TD ()]
	    else:
		right = right.toHtml ()
	    row = row + left + right
	    
	    table2.append (row)

def genScreenshots ():
    page = Page (linkBoxItem='Screenshots')

    page.meat = page.meat + [
	Heading (2, 'Pictures around AROS'),
	Paragraph ('If you ever wanted to know what Aaron "Optimizer" Digulla'
	    ' looks like, here are two pictures:'),
	ThumbnailTable (
	    Thumbnail ('pics/developers/Digulla-2.jpg'),
	    Thumbnail ('pics/developers/Digulla-1.jpg'),
	),
	Paragraph ('Picture of Nils Henrik Lorentzen:'),
	ThumbnailTable (
	    Thumbnail ('pics/developers/nlorentz.jpg'),
	),
	Paragraph ('Hopefully, more pictures of AROS developers will'
	    ' show up here :-)'),
	Heading (2, 'Screenshots'),
    ]

    def processDir (dir):
	str = os.path.basename (dir)
	date = '%d.%d.%d' % (
	    int (str[6:8]),
	    int (str[4:6]),
	    int (str[0:4]),
	)
	fh = open (os.path.join (dir, 'README'), 'r')
	text = fh.read ()
	fh.close ()
	
	list = [
	    Paragraph (RawText ('%s - %s' % (date, text))),
	]
	files = glob.glob (os.path.join (dir, "*.*"))
	files.sort ()
	pics = []
	for file in files:
	    if file[-4:] == '.txt' or string.find (file, '_mini.') != -1:
		continue

	    pics.append (Thumbnail (os.path.join (screenshoturl, str,
		os.path.basename (file))))
	
	list.append (apply (ThumbnailTable, pics))
	return list
	    
    dirs = glob.glob (os.path.join (htmldir, screenshoturl, '[0-9]*'))
    dirs.sort ()
    dirs.reverse ()
    for dir in dirs:
	page.meat = page.meat + processDir (dir)

    page.write ('screenshots.html')

def genDownload ():
    page = Page (linkBoxItem='Download')
    page.meat = page.meat + [Text ('FIXME')]
    page.write ('download.html')

class FileInfo:
    def __init__ (self, path):
	filename = os.path.basename (path)
	self.filename, self.path = filename, path

	size = os.path.getsize (path)

	if size > 1024:
	    size = ((size+1023) / 1024)
	    self.size = '%dKB' % size
	    if size > 1024:
		size = ((size+1023) / 1024)
		self.size = '%dMB' % size

class Snapshot (FileInfo):
    def __init__ (self, path):
	FileInfo.__init__ (self, path)

	filename = self.filename
	self.ext = filename[-3:]
	filename = filename[:-4]
	self.date = filename[-8:]
	filename = filename[:-8]
	self.title = filename[5:-1]
	
	logfile = path[:-3] + 'log'
	if os.path.exists (logfile):
	    self.log = FileInfo (logfile)
	else:
	    self.log = None
	#print self.__dict__

def thumbnail(self, size):
    "Create thumbnail representation (modifies image in place)"

    # preserve aspect ratio
    x, y = self.size
    if x > size[0]: y = y * size[0] / x; x = size[0]
    if y > size[1]: x = x * size[1] / y; y = size[1]
    size = x, y

    if size == self.size:
	return

    self.draft(None, size)

    self.load()

    im = self.resize(size, PIL.Image.BICUBIC)

    self.im = im.im
    self.mode = im.mode
    self.size = size

class Thumbnail (FileInfo):
    def __init__ (self, url):
	path = os.path.join (htmldir, url)
	FileInfo.__init__ (self, path)

	self.url = url
	try:
	    pic = PIL.Image.open (path)
	except:
	    print path
	    raise
	self.width, self.height = pic.size
	self.format = pic.format

	pos = string.rfind (url, '.')
	self.thumbnailURL = url[:pos] + '_mini.jpg'
	pos = string.rfind (path, '.')
	thumbnailPath = path[:pos] + '_mini.jpg'
	picMTime = os.path.getmtime (path)
	if os.path.exists (thumbnailPath):
	    tnMTime = os.path.getmtime (thumbnailPath)
	else:
	    tnMTime = 0
	if tnMTime < picMTime:
	    #tn = pic.convert ('RGB')
	    # Unfortunately, thumbnail() doesn't filter :-(
	    #tn.thumbnail = thumbnail
	    # FIXME event bicubic filtering looks pretty ugly.
	    # Replace this code with code that calls convert.
	    #thumbnail (tn, (64, 128))
	    #tn.save (thumbnailPath, 'JPEG')
	    os.system ('convert -geometry "64x128>" -quality 100 "%s" "%s"' % (
		path, thumbnailPath
	    ))

	infoFile = path[:pos] + '.txt'
	fh = open (infoFile)
	self.text = fh.read ()
	fh.close ()

    def toHtml (self):
	return [
	    TD (
		Href (self.url, Image ((self.thumbnailURL, 0,0))),
		width="64",
		valign="TOP",
	    ),
	    TD (
		Paragraph (RawText (self.text)),
		Text (Strong ('%s %dx%d (%s)' % (
		    self.format,
		    self.width, self.height,
		    self.size,
		))),
		#width="50%",
		valign="TOP",
	    ),
	]

def genSnapshots ():
    page = Page (linkBoxItem='Download')

    files = glob.glob (os.path.join (ftpdir, 'snapshots/*.tgz'))
    if not files:
        page.meat = page.meat + [Text ('No snapshots found')]
    else:
	dict = {}
	columns = {}
	days = {}

	for file in files:
	    ss = Snapshot (file)
	    day = dict.get (ss.date, None)
	    if not day:
		day = {}
		dict[ss.date] = day
	    if ss.ext != 'tgz':
		print 'Unknown Snapshot', file
		continue

	    day[ss.title] = ss
	    columns[ss.title] = None
	    days[ss.date] = None
	
	table = TableLite (cellpadding=15, border=2)
	page.meat = page.meat + [table]
	
	colList = columns.keys ()
	colList.sort ()
	row = TR ()
	table.append (row)
	td = TH ('Date')
	row = row + [td]
	    
	for col in colList:
	    td = TH (col)
	    row = row + [td]
	
	dateList = days.keys ()
	dateList.sort ()
	dateList.reverse ()
	for date in dateList:
	    row = TR ()
	    table.append (row)

	    str = '%d.%d.%d' % (
		int (date[6:8]),
		int (date[4:6]),
		int (date[0:4]),
	    )
	    row = row + [TD (str)]

	    day = dict.get (date, {})

	    for col in colList:
		t = Text ()
		ss = day.get (col, None)
		if ss:
		    t.append (Href ('ftp://ftp.aros.org/pub/aros/snapshots/%s' % ss.filename,
			ss.size
		    ))
		else:
		    t.append ('-')
		
		if ss.log:
		    t.append ('(Log: ')
		    t.append (Href (
			'ftp://ftp.aros.org/pub/aros/snapshots/%s' % \
			    ss.log.filename,
			ss.log.size
		    ))
		    t.append (')')
		else:
		    if not ss.title in ('contrib', 'source'):
			t.append ('(No log)')

		row = row + [TD (t)]

    page.write ('snapshots.html')

def processLinks (links):
    list = List ()

    for link in links:
	if type (link) == type (()):
	    link, children = link[0], link[1:]
	else:
	    children = None

	text = Text (link.href)
	if link.text:
	    if type (link.text) == type (()):
		t = Text ()
		for item in link.text:
		    t.append (item)
	    else:
		t = Text (link.text)
	    text.append (t)
	if link.logo:
	    text.append (Image ((link.logo, 0,0)))

	list.append (text)
	
	if children:
	    sublist = processLinks (children)
	    list.append (sublist)
    
    return list

def genLinks ():
    def processSection (links, title):
	body = []

	#print title, list

	body.append (Name (title))
	body.append (Heading (2, title))
	list = processLinks (links)
	body.append (list)

	return body

    page = Page (linkBoxItem='Links')

    from links import moreRelated, articles, homepages, lessRelated

    page.meat = page.meat \
	+ processSection (moreRelated, 'More Related') \
	+ processSection (articles, 'Articles') \
	+ processSection (homepages, 'Homepages') \
	+ processSection (lessRelated, 'Less Related')

    page.write ('links.html')

genNews ()
genStatus ()
genDocumentation ()
genScreenshots ()
genDownload ()
genSnapshots ()
genLinks ()
